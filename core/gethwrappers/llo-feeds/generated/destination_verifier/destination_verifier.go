// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package destination_verifier

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CommonAddressAndWeight struct {
	Addr   common.Address
	Weight uint64
}

var DestinationVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadVerification\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes24\",\"name\":\"DONConfigID\",\"type\":\"bytes24\"}],\"name\":\"DONConfigAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DONConfigDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numSigners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSigners\",\"type\":\"uint256\"}],\"name\":\"ExcessSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FaultToleranceMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeManagerInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numSigners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSigners\",\"type\":\"uint256\"}],\"name\":\"InsufficientSigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ssLength\",\"type\":\"uint256\"}],\"name\":\"MismatchedSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessController\",\"type\":\"address\"}],\"name\":\"AccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes24\",\"name\":\"DONConfigID\",\"type\":\"bytes24\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ConfigActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes24\",\"name\":\"DONConfigID\",\"type\":\"bytes24\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structCommon.AddressAndWeight[]\",\"name\":\"recipientAddressesAndWeights\",\"type\":\"tuple[]\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"ReportVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_verifierProxy\",\"outputs\":[{\"internalType\":\"contractIDestinationVerifierProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessController\",\"type\":\"address\"}],\"name\":\"setAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"internalType\":\"structCommon.AddressAndWeight[]\",\"name\":\"recipientAddressesAndWeights\",\"type\":\"tuple[]\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes24\",\"name\":\"DONConfigID\",\"type\":\"bytes24\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setConfigActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerifier\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signedReport\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"parameterPayload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"signedReports\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"parameterPayload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"verifyBulk\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162002eb538038062002eb58339810160408190526200003491620001a6565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000fb565b5050506001600160a01b038116620000e95760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0316608052620001d8565b336001600160a01b03821603620001555760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600060208284031215620001b957600080fd5b81516001600160a01b0381168114620001d157600080fd5b9392505050565b608051612cb362000202600039600081816102bb0152818161036c0152610f820152612cb36000f3fe6080604052600436106100dd5760003560e01c806379ba50971161007f578063d7c72e4e11610059578063d7c72e4e146102dd578063f08391d8146102fd578063f2d638261461031d578063f2fde38b1461034857600080fd5b806379ba5097146102695780638da5cb5b1461027e578063b97455c7146102a957600080fd5b8063294d2bb1116100bb578063294d2bb1146101f45780633a154abb14610207578063453ec61b14610229578063472d35b91461024957600080fd5b806301ffc9a7146100e257806316d6b5f614610159578063181f5a77146101a5575b600080fd5b3480156100ee57600080fd5b506101446100fd366004611e1c565b7fffffffff00000000000000000000000000000000000000000000000000000000167f294d2bb1000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b5060065473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610150565b3480156101b157600080fd5b5060408051808201909152601981527f44657374696e6174696f6e566572696669657220312e302e300000000000000060208201525b6040516101509190611ec9565b6101e7610202366004611f4e565b610368565b34801561021357600080fd5b50610227610222366004611fdd565b6105ce565b005b34801561023557600080fd5b506102276102443660046121e7565b610761565b34801561025557600080fd5b506102276102643660046122ba565b610df2565b34801561027557600080fd5b50610227610e81565b34801561028a57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610180565b3480156102b557600080fd5b506101807f000000000000000000000000000000000000000000000000000000000000000081565b6102f06102eb3660046122d5565b610f7e565b6040516101509190612358565b34801561030957600080fd5b506102276103183660046122ba565b61128b565b34801561032957600080fd5b5060055473ffffffffffffffffffffffffffffffffffffffff16610180565b34801561035457600080fd5b506102276103633660046122ba565b611312565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146103d9576040517fef67f5d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654829073ffffffffffffffffffffffffffffffffffffffff16801580159061049857506040517f6b14daf800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690636b14daf8906104559085906000903690600401612421565b602060405180830381865afa158015610472573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610496919061245a565b155b156104cf576040517fef67f5d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806104dd8a8a88611326565b600554919350915073ffffffffffffffffffffffffffffffffffffffff16156105c1576005546040517f86968cfd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906386968cfd906105609084908e908e908e908e908e90600401612477565b600060405180830381600087803b15801561057a57600080fd5b505af192505050801561058b575060015b6105c1576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5098975050505050505050565b6105d6611615565b7fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008083166000908152600460209081526040918290208251606081018452905480841b90941680825260ff78010000000000000000000000000000000000000000000000008604811693830193909352790100000000000000000000000000000000000000000000000000909404909116151591810191909152906106a7576040517f59d7257e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000831660008181526004602090815260409182902080547fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16790100000000000000000000000000000000000000000000000000871515908102919091179091558251938452908301527f90186a1e77b498ec417ea88bd026cae00d7043c357cc45221777623bda582dd4910160405180910390a1505050565b82518260ff16806000036107a1576040517f0743bae600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601f8211156107eb576040517f61750f4000000000000000000000000000000000000000000000000000000000815260048101839052601f60248201526044015b60405180910390fd5b6107f68160036124fd565b821161084e57816108088260036124fd565b61081390600161251a565b6040517f9dd9e6d8000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016107e2565b610856611615565b61085f85611698565b15610896576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108af856000600188516108aa919061252d565b611747565b600085856040516020016108c4929190612540565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301207fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000808216600090815260049094529282902054909350901b161561098e576040517f9a92755c0000000000000000000000000000000000000000000000000000000081527fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000821660048201526024016107e2565b604080518082019091526000808252602082015260005b8751811015610c3157600073ffffffffffffffffffffffffffffffffffffffff168882815181106109d8576109d86125b8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610a2d576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808467ffffffffffffffff191681526020014263ffffffff16815250915081600260008a8481518110610a6c57610a6c6125b8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040908101600090812084518154959094015163ffffffff167801000000000000000000000000000000000000000000000000027fffffffff000000000000000000000000000000000000000000000000000000009095169390921c9290921792909217909155885183916003918b9085908110610b1757610b176125b8565b602002602001015186604051602001610b8392919060609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682527fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166014820152602c0190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012083528282019390935290820160002083518154949092015163ffffffff167801000000000000000000000000000000000000000000000000027fffffffff000000000000000000000000000000000000000000000000000000009094169190921c17919091179055610c2a816125e7565b90506109a5565b50845115610cc4576005546040517ff65df96200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063f65df96290610c919085908990600401612685565b600060405180830381600087803b158015610cab57600080fd5b505af1158015610cbf573d6000803e3d6000fd5b505050505b604080516060810182527fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000841680825260ff808a1660208085019182526001858701908152600085815260049092529086902094518554925191511515790100000000000000000000000000000000000000000000000000027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff929094167801000000000000000000000000000000000000000000000000027fffffffffffffff0000000000000000000000000000000000000000000000000090931690871c1791909117161790915590517f2d763a674a99583454a287d792819ffb9ff7e791c23e7745a082701136ce336c90610de1908a908a908a906126c8565b60405180910390a250505050505050565b610dfa611615565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f04628abcaa6b1674651352125cb94b65b289145bc2bc4d67720bb7d966372f0391015b60405180910390a15050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610f02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016107e2565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610fef576040517fef67f5d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654829073ffffffffffffffffffffffffffffffffffffffff1680158015906110ae57506040517f6b14daf800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690636b14daf89061106b9085906000903690600401612421565b602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac919061245a565b155b156110e5576040517fef67f5d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008767ffffffffffffffff8111156111005761110061203b565b60405190808252806020026020018201604052801561113357816020015b606081526020019060019003908161111e5790505b50905060008867ffffffffffffffff8111156111515761115161203b565b60405190808252806020026020018201604052801561117a578160200160208202803683370190505b50905060005b8981101561120c576000806111b88d8d858181106111a0576111a06125b8565b90506020028101906111b2919061273f565b8b611326565b91509150818584815181106111cf576111cf6125b8565b6020026020010181905250808484815181106111ed576111ed6125b8565b602002602001018181525050505080611205906125e7565b9050611180565b5060055473ffffffffffffffffffffffffffffffffffffffff16156105c1576005546040517f3690750900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906336907509906105609084908e908e908e908e908e906004016127a4565b611293611615565b6006805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f953e92b1a6442e9c3242531154a3f6f6eb00b4e9c719ba8118fa6235e4ce89b69101610e75565b61131a611615565b61132381611937565b50565b60606000806000806113388888611a2c565b7fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008082166000908152600460209081526040918290208251606081018452905480841b909416815260ff7801000000000000000000000000000000000000000000000000850481169282019290925279010000000000000000000000000000000000000000000000000090930416151590820181905293965091945092509061140d576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015160ff1683511161144e576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b845181101561158e5784818151811061146d5761146d6125b8565b602002602001015183600001516040516020016114dd92919060609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682527fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166014820152602c0190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600390935291819020549193501b7fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001661157e576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611587816125e7565b9050611452565b50611598856128e2565b60405173ffffffffffffffffffffffffffffffffffffffff8a1681527f58ca9502e98a536e06e72d680fcc251e5d10b72291a281665a2c2dc0ac30fcc59060200160405180910390a2505192987fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090931697509195505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016107e2565b565b6000805b825181101561173e5760006116b282600161251a565b90505b8351811015611735578381815181106116d0576116d06125b8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16848381518110611700576117006125b8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361172d575060019392505050565b6001016116b5565b5060010161169c565b50600092915050565b8181808203611757575050505050565b60008560026117668787612927565b611770919061294e565b61177a90876129dd565b8151811061178a5761178a6125b8565b602002602001015190505b818313611909575b8073ffffffffffffffffffffffffffffffffffffffff168684815181106117c6576117c66125b8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610156117fc57826117f481612a05565b93505061179d565b85828151811061180e5761180e6125b8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16101561185b578161185381612a36565b9250506117fc565b81831361190457858281518110611874576118746125b8565b602002602001015186848151811061188e5761188e6125b8565b60200260200101518785815181106118a8576118a86125b8565b602002602001018885815181106118c1576118c16125b8565b73ffffffffffffffffffffffffffffffffffffffff938416602091820292909201015291169052826118f281612a05565b935050818061190090612a36565b9250505b611795565b8185121561191c5761191c868684611747565b8383121561192f5761192f868486611747565b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff8216036119b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016107e2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60608060008080808080611a42898b018b612b76565b945094509450945094508151835114611a9457825182516040517ff0d31408000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016107e2565b8251600003611acf576040517fc7af40f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848051906020012086604051602001611aeb929190612c51565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160209182012083830190925260008084529083018190529092509060408051808201909152600080825260208201526000875167ffffffffffffffff811115611b6657611b6661203b565b604051908082528060200260200182016040528015611b8f578160200160208202803683370190505b50905060005b8851811015611dc357600186888360208110611bb357611bb36125b8565b611bc091901a601b612c8d565b8b8481518110611bd257611bd26125b8565b60200260200101518b8581518110611bec57611bec6125b8565b602002602001015160405160008152602001604052604051611c2a949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611c4c573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152908490208385018552549384901b7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016808452780100000000000000000000000000000000000000000000000090940463ffffffff1690830152975095509050611d2f576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82517fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000161580611d725750826020015163ffffffff16846020015163ffffffff16105b15611d7b578392505b84828281518110611d8e57611d8e6125b8565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152611dbc816125e7565b9050611b95565b50611dcd81611698565b15611e04576040517f4df18f0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9051979b509950959750505050505050509250925092565b600060208284031215611e2e57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611e5e57600080fd5b9392505050565b6000815180845260005b81811015611e8b57602081850181015186830182015201611e6f565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000611e5e6020830184611e65565b60008083601f840112611eee57600080fd5b50813567ffffffffffffffff811115611f0657600080fd5b602083019150836020828501011115611f1e57600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611f4957600080fd5b919050565b600080600080600060608688031215611f6657600080fd5b853567ffffffffffffffff80821115611f7e57600080fd5b611f8a89838a01611edc565b90975095506020880135915080821115611fa357600080fd5b50611fb088828901611edc565b9094509250611fc3905060408701611f25565b90509295509295909350565b801515811461132357600080fd5b60008060408385031215611ff057600080fd5b82357fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008116811461202057600080fd5b9150602083013561203081611fcf565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561208d5761208d61203b565b60405290565b6040516060810167ffffffffffffffff8111828210171561208d5761208d61203b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156120fd576120fd61203b565b604052919050565b600067ffffffffffffffff82111561211f5761211f61203b565b5060051b60200190565b803560ff81168114611f4957600080fd5b600082601f83011261214b57600080fd5b8135602061216061215b83612105565b6120b6565b82815260069290921b8401810191818101908684111561217f57600080fd5b8286015b848110156121dc576040818903121561219c5760008081fd5b6121a461206a565b6121ad82611f25565b81528482013567ffffffffffffffff811681146121ca5760008081fd5b81860152835291830191604001612183565b509695505050505050565b6000806000606084860312156121fc57600080fd5b833567ffffffffffffffff8082111561221457600080fd5b818601915086601f83011261222857600080fd5b8135602061223861215b83612105565b82815260059290921b8401810191818101908a84111561225757600080fd5b948201945b8386101561227c5761226d86611f25565b8252948201949082019061225c565b975061228b9050888201612129565b9550505060408601359150808211156122a357600080fd5b506122b08682870161213a565b9150509250925092565b6000602082840312156122cc57600080fd5b611e5e82611f25565b6000806000806000606086880312156122ed57600080fd5b853567ffffffffffffffff8082111561230557600080fd5b818801915088601f83011261231957600080fd5b81358181111561232857600080fd5b8960208260051b850101111561233d57600080fd5b602092830197509550908701359080821115611fa357600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156123cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526123b9858351611e65565b9450928501929085019060010161237f565b5092979650505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff841681526040602082015260006124516040830184866123d8565b95945050505050565b60006020828403121561246c57600080fd5b8151611e5e81611fcf565b8681526080602082015260006124916080830187896123d8565b82810360408401526124a48186886123d8565b91505073ffffffffffffffffffffffffffffffffffffffff83166060830152979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417612514576125146124ce565b92915050565b80820180821115612514576125146124ce565b81810381811115612514576125146124ce565b825160009082906020808701845b8381101561258057815173ffffffffffffffffffffffffffffffffffffffff168552938201939082019060010161254e565b5050505060f89390931b7fff000000000000000000000000000000000000000000000000000000000000001683525050600101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612618576126186124ce565b5060010190565b600081518084526020808501945080840160005b8381101561267a578151805173ffffffffffffffffffffffffffffffffffffffff16885283015167ffffffffffffffff168388015260409096019590820190600101612633565b509495945050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000831681526040602082015260006126c0604083018461261f565b949350505050565b606080825284519082018190526000906020906080840190828801845b8281101561271757815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016126e5565b50505060ff8616828501528381036040850152612734818661261f565b979650505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261277457600080fd5b83018035915067ffffffffffffffff82111561278f57600080fd5b602001915036819003821315611f1e57600080fd5b6080808252875190820181905260009060209060a0840190828b01845b828110156127dd578151845292840192908401906001016127c1565b50505083810382850152878152818101600589901b820183018a60005b8b8110156128a5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18e360301811261285b57600080fd5b8d01868101903567ffffffffffffffff81111561287757600080fd5b80360382131561288657600080fd5b6128918582846123d8565b9588019594505050908501906001016127fa565b505085810360408701526128ba81898b6123d8565b945050505050612734606083018473ffffffffffffffffffffffffffffffffffffffff169052565b80516020808301519190811015612921577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b8181036000831280158383131683831282161715612947576129476124ce565b5092915050565b600082612984577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156129d8576129d86124ce565b500590565b80820182811260008312801582168215821617156129fd576129fd6124ce565b505092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612618576126186124ce565b60007f80000000000000000000000000000000000000000000000000000000000000008203612a6757612a676124ce565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082601f830112612a9e57600080fd5b813567ffffffffffffffff811115612ab857612ab861203b565b612ae960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016120b6565b818152846020838601011115612afe57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612b2c57600080fd5b81356020612b3c61215b83612105565b82815260059290921b84018101918181019086841115612b5b57600080fd5b8286015b848110156121dc5780358352918301918301612b5f565b600080600080600060e08688031215612b8e57600080fd5b86601f870112612b9d57600080fd5b612ba5612093565b806060880189811115612bb757600080fd5b885b81811015612bd1578035845260209384019301612bb9565b5090965035905067ffffffffffffffff80821115612bee57600080fd5b612bfa89838a01612a8d565b95506080880135915080821115612c1057600080fd5b612c1c89838a01612b1b565b945060a0880135915080821115612c3257600080fd5b50612c3f88828901612b1b565b9598949750929560c001359392505050565b828152600060208083018460005b6003811015612c7c57815183529183019190830190600101612c5f565b505050506080820190509392505050565b60ff8181168382160190811115612514576125146124ce56fea164736f6c6343000813000a",
}

var DestinationVerifierABI = DestinationVerifierMetaData.ABI

var DestinationVerifierBin = DestinationVerifierMetaData.Bin

func DeployDestinationVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, verifierProxy common.Address) (common.Address, *types.Transaction, *DestinationVerifier, error) {
	parsed, err := DestinationVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DestinationVerifierBin), backend, verifierProxy)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DestinationVerifier{address: address, abi: *parsed, DestinationVerifierCaller: DestinationVerifierCaller{contract: contract}, DestinationVerifierTransactor: DestinationVerifierTransactor{contract: contract}, DestinationVerifierFilterer: DestinationVerifierFilterer{contract: contract}}, nil
}

type DestinationVerifier struct {
	address common.Address
	abi     abi.ABI
	DestinationVerifierCaller
	DestinationVerifierTransactor
	DestinationVerifierFilterer
}

type DestinationVerifierCaller struct {
	contract *bind.BoundContract
}

type DestinationVerifierTransactor struct {
	contract *bind.BoundContract
}

type DestinationVerifierFilterer struct {
	contract *bind.BoundContract
}

type DestinationVerifierSession struct {
	Contract     *DestinationVerifier
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type DestinationVerifierCallerSession struct {
	Contract *DestinationVerifierCaller
	CallOpts bind.CallOpts
}

type DestinationVerifierTransactorSession struct {
	Contract     *DestinationVerifierTransactor
	TransactOpts bind.TransactOpts
}

type DestinationVerifierRaw struct {
	Contract *DestinationVerifier
}

type DestinationVerifierCallerRaw struct {
	Contract *DestinationVerifierCaller
}

type DestinationVerifierTransactorRaw struct {
	Contract *DestinationVerifierTransactor
}

func NewDestinationVerifier(address common.Address, backend bind.ContractBackend) (*DestinationVerifier, error) {
	abi, err := abi.JSON(strings.NewReader(DestinationVerifierABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindDestinationVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifier{address: address, abi: abi, DestinationVerifierCaller: DestinationVerifierCaller{contract: contract}, DestinationVerifierTransactor: DestinationVerifierTransactor{contract: contract}, DestinationVerifierFilterer: DestinationVerifierFilterer{contract: contract}}, nil
}

func NewDestinationVerifierCaller(address common.Address, caller bind.ContractCaller) (*DestinationVerifierCaller, error) {
	contract, err := bindDestinationVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierCaller{contract: contract}, nil
}

func NewDestinationVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*DestinationVerifierTransactor, error) {
	contract, err := bindDestinationVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierTransactor{contract: contract}, nil
}

func NewDestinationVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*DestinationVerifierFilterer, error) {
	contract, err := bindDestinationVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierFilterer{contract: contract}, nil
}

func bindDestinationVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DestinationVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_DestinationVerifier *DestinationVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DestinationVerifier.Contract.DestinationVerifierCaller.contract.Call(opts, result, method, params...)
}

func (_DestinationVerifier *DestinationVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.DestinationVerifierTransactor.contract.Transfer(opts)
}

func (_DestinationVerifier *DestinationVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.DestinationVerifierTransactor.contract.Transact(opts, method, params...)
}

func (_DestinationVerifier *DestinationVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DestinationVerifier.Contract.contract.Call(opts, result, method, params...)
}

func (_DestinationVerifier *DestinationVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.contract.Transfer(opts)
}

func (_DestinationVerifier *DestinationVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.contract.Transact(opts, method, params...)
}

func (_DestinationVerifier *DestinationVerifierCaller) GetAccessController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "getAccessController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) GetAccessController() (common.Address, error) {
	return _DestinationVerifier.Contract.GetAccessController(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) GetAccessController() (common.Address, error) {
	return _DestinationVerifier.Contract.GetAccessController(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCaller) GetFeeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "getFeeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) GetFeeManager() (common.Address, error) {
	return _DestinationVerifier.Contract.GetFeeManager(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) GetFeeManager() (common.Address, error) {
	return _DestinationVerifier.Contract.GetFeeManager(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCaller) IVerifierProxy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "i_verifierProxy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) IVerifierProxy() (common.Address, error) {
	return _DestinationVerifier.Contract.IVerifierProxy(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) IVerifierProxy() (common.Address, error) {
	return _DestinationVerifier.Contract.IVerifierProxy(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) Owner() (common.Address, error) {
	return _DestinationVerifier.Contract.Owner(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) Owner() (common.Address, error) {
	return _DestinationVerifier.Contract.Owner(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DestinationVerifier.Contract.SupportsInterface(&_DestinationVerifier.CallOpts, interfaceId)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DestinationVerifier.Contract.SupportsInterface(&_DestinationVerifier.CallOpts, interfaceId)
}

func (_DestinationVerifier *DestinationVerifierCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DestinationVerifier.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_DestinationVerifier *DestinationVerifierSession) TypeAndVersion() (string, error) {
	return _DestinationVerifier.Contract.TypeAndVersion(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierCallerSession) TypeAndVersion() (string, error) {
	return _DestinationVerifier.Contract.TypeAndVersion(&_DestinationVerifier.CallOpts)
}

func (_DestinationVerifier *DestinationVerifierTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "acceptOwnership")
}

func (_DestinationVerifier *DestinationVerifierSession) AcceptOwnership() (*types.Transaction, error) {
	return _DestinationVerifier.Contract.AcceptOwnership(&_DestinationVerifier.TransactOpts)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _DestinationVerifier.Contract.AcceptOwnership(&_DestinationVerifier.TransactOpts)
}

func (_DestinationVerifier *DestinationVerifierTransactor) SetAccessController(opts *bind.TransactOpts, accessController common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "setAccessController", accessController)
}

func (_DestinationVerifier *DestinationVerifierSession) SetAccessController(accessController common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetAccessController(&_DestinationVerifier.TransactOpts, accessController)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) SetAccessController(accessController common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetAccessController(&_DestinationVerifier.TransactOpts, accessController)
}

func (_DestinationVerifier *DestinationVerifierTransactor) SetConfig(opts *bind.TransactOpts, signers []common.Address, f uint8, recipientAddressesAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "setConfig", signers, f, recipientAddressesAndWeights)
}

func (_DestinationVerifier *DestinationVerifierSession) SetConfig(signers []common.Address, f uint8, recipientAddressesAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetConfig(&_DestinationVerifier.TransactOpts, signers, f, recipientAddressesAndWeights)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) SetConfig(signers []common.Address, f uint8, recipientAddressesAndWeights []CommonAddressAndWeight) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetConfig(&_DestinationVerifier.TransactOpts, signers, f, recipientAddressesAndWeights)
}

func (_DestinationVerifier *DestinationVerifierTransactor) SetConfigActive(opts *bind.TransactOpts, DONConfigID [24]byte, isActive bool) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "setConfigActive", DONConfigID, isActive)
}

func (_DestinationVerifier *DestinationVerifierSession) SetConfigActive(DONConfigID [24]byte, isActive bool) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetConfigActive(&_DestinationVerifier.TransactOpts, DONConfigID, isActive)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) SetConfigActive(DONConfigID [24]byte, isActive bool) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetConfigActive(&_DestinationVerifier.TransactOpts, DONConfigID, isActive)
}

func (_DestinationVerifier *DestinationVerifierTransactor) SetFeeManager(opts *bind.TransactOpts, feeManager common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "setFeeManager", feeManager)
}

func (_DestinationVerifier *DestinationVerifierSession) SetFeeManager(feeManager common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetFeeManager(&_DestinationVerifier.TransactOpts, feeManager)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) SetFeeManager(feeManager common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.SetFeeManager(&_DestinationVerifier.TransactOpts, feeManager)
}

func (_DestinationVerifier *DestinationVerifierTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "transferOwnership", to)
}

func (_DestinationVerifier *DestinationVerifierSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.TransferOwnership(&_DestinationVerifier.TransactOpts, to)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.TransferOwnership(&_DestinationVerifier.TransactOpts, to)
}

func (_DestinationVerifier *DestinationVerifierTransactor) Verify(opts *bind.TransactOpts, signedReport []byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "verify", signedReport, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierSession) Verify(signedReport []byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.Verify(&_DestinationVerifier.TransactOpts, signedReport, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) Verify(signedReport []byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.Verify(&_DestinationVerifier.TransactOpts, signedReport, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierTransactor) VerifyBulk(opts *bind.TransactOpts, signedReports [][]byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.contract.Transact(opts, "verifyBulk", signedReports, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierSession) VerifyBulk(signedReports [][]byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.VerifyBulk(&_DestinationVerifier.TransactOpts, signedReports, parameterPayload, sender)
}

func (_DestinationVerifier *DestinationVerifierTransactorSession) VerifyBulk(signedReports [][]byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error) {
	return _DestinationVerifier.Contract.VerifyBulk(&_DestinationVerifier.TransactOpts, signedReports, parameterPayload, sender)
}

type DestinationVerifierAccessControllerSetIterator struct {
	Event *DestinationVerifierAccessControllerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierAccessControllerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierAccessControllerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierAccessControllerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierAccessControllerSetIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierAccessControllerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierAccessControllerSet struct {
	OldAccessController common.Address
	NewAccessController common.Address
	Raw                 types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterAccessControllerSet(opts *bind.FilterOpts) (*DestinationVerifierAccessControllerSetIterator, error) {

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "AccessControllerSet")
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierAccessControllerSetIterator{contract: _DestinationVerifier.contract, event: "AccessControllerSet", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchAccessControllerSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierAccessControllerSet) (event.Subscription, error) {

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "AccessControllerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierAccessControllerSet)
				if err := _DestinationVerifier.contract.UnpackLog(event, "AccessControllerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseAccessControllerSet(log types.Log) (*DestinationVerifierAccessControllerSet, error) {
	event := new(DestinationVerifierAccessControllerSet)
	if err := _DestinationVerifier.contract.UnpackLog(event, "AccessControllerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierConfigActivatedIterator struct {
	Event *DestinationVerifierConfigActivated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierConfigActivatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierConfigActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierConfigActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierConfigActivatedIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierConfigActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierConfigActivated struct {
	DONConfigID [24]byte
	IsActive    bool
	Raw         types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterConfigActivated(opts *bind.FilterOpts) (*DestinationVerifierConfigActivatedIterator, error) {

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "ConfigActivated")
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierConfigActivatedIterator{contract: _DestinationVerifier.contract, event: "ConfigActivated", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchConfigActivated(opts *bind.WatchOpts, sink chan<- *DestinationVerifierConfigActivated) (event.Subscription, error) {

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "ConfigActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierConfigActivated)
				if err := _DestinationVerifier.contract.UnpackLog(event, "ConfigActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseConfigActivated(log types.Log) (*DestinationVerifierConfigActivated, error) {
	event := new(DestinationVerifierConfigActivated)
	if err := _DestinationVerifier.contract.UnpackLog(event, "ConfigActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierConfigSetIterator struct {
	Event *DestinationVerifierConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierConfigSetIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierConfigSet struct {
	DONConfigID                  [24]byte
	Signers                      []common.Address
	F                            uint8
	RecipientAddressesAndWeights []CommonAddressAndWeight
	Raw                          types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterConfigSet(opts *bind.FilterOpts, DONConfigID [][24]byte) (*DestinationVerifierConfigSetIterator, error) {

	var DONConfigIDRule []interface{}
	for _, DONConfigIDItem := range DONConfigID {
		DONConfigIDRule = append(DONConfigIDRule, DONConfigIDItem)
	}

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "ConfigSet", DONConfigIDRule)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierConfigSetIterator{contract: _DestinationVerifier.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierConfigSet, DONConfigID [][24]byte) (event.Subscription, error) {

	var DONConfigIDRule []interface{}
	for _, DONConfigIDItem := range DONConfigID {
		DONConfigIDRule = append(DONConfigIDRule, DONConfigIDItem)
	}

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "ConfigSet", DONConfigIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierConfigSet)
				if err := _DestinationVerifier.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseConfigSet(log types.Log) (*DestinationVerifierConfigSet, error) {
	event := new(DestinationVerifierConfigSet)
	if err := _DestinationVerifier.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierFeeManagerSetIterator struct {
	Event *DestinationVerifierFeeManagerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierFeeManagerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierFeeManagerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierFeeManagerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierFeeManagerSetIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierFeeManagerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierFeeManagerSet struct {
	OldFeeManager common.Address
	NewFeeManager common.Address
	Raw           types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterFeeManagerSet(opts *bind.FilterOpts) (*DestinationVerifierFeeManagerSetIterator, error) {

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "FeeManagerSet")
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierFeeManagerSetIterator{contract: _DestinationVerifier.contract, event: "FeeManagerSet", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchFeeManagerSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierFeeManagerSet) (event.Subscription, error) {

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "FeeManagerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierFeeManagerSet)
				if err := _DestinationVerifier.contract.UnpackLog(event, "FeeManagerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseFeeManagerSet(log types.Log) (*DestinationVerifierFeeManagerSet, error) {
	event := new(DestinationVerifierFeeManagerSet)
	if err := _DestinationVerifier.contract.UnpackLog(event, "FeeManagerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierOwnershipTransferRequestedIterator struct {
	Event *DestinationVerifierOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DestinationVerifierOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierOwnershipTransferRequestedIterator{contract: _DestinationVerifier.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *DestinationVerifierOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierOwnershipTransferRequested)
				if err := _DestinationVerifier.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseOwnershipTransferRequested(log types.Log) (*DestinationVerifierOwnershipTransferRequested, error) {
	event := new(DestinationVerifierOwnershipTransferRequested)
	if err := _DestinationVerifier.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierOwnershipTransferredIterator struct {
	Event *DestinationVerifierOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DestinationVerifierOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierOwnershipTransferredIterator{contract: _DestinationVerifier.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *DestinationVerifierOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierOwnershipTransferred)
				if err := _DestinationVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseOwnershipTransferred(log types.Log) (*DestinationVerifierOwnershipTransferred, error) {
	event := new(DestinationVerifierOwnershipTransferred)
	if err := _DestinationVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type DestinationVerifierReportVerifiedIterator struct {
	Event *DestinationVerifierReportVerified

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *DestinationVerifierReportVerifiedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DestinationVerifierReportVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(DestinationVerifierReportVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *DestinationVerifierReportVerifiedIterator) Error() error {
	return it.fail
}

func (it *DestinationVerifierReportVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type DestinationVerifierReportVerified struct {
	FeedId    [32]byte
	Requester common.Address
	Raw       types.Log
}

func (_DestinationVerifier *DestinationVerifierFilterer) FilterReportVerified(opts *bind.FilterOpts, feedId [][32]byte) (*DestinationVerifierReportVerifiedIterator, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _DestinationVerifier.contract.FilterLogs(opts, "ReportVerified", feedIdRule)
	if err != nil {
		return nil, err
	}
	return &DestinationVerifierReportVerifiedIterator{contract: _DestinationVerifier.contract, event: "ReportVerified", logs: logs, sub: sub}, nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) WatchReportVerified(opts *bind.WatchOpts, sink chan<- *DestinationVerifierReportVerified, feedId [][32]byte) (event.Subscription, error) {

	var feedIdRule []interface{}
	for _, feedIdItem := range feedId {
		feedIdRule = append(feedIdRule, feedIdItem)
	}

	logs, sub, err := _DestinationVerifier.contract.WatchLogs(opts, "ReportVerified", feedIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(DestinationVerifierReportVerified)
				if err := _DestinationVerifier.contract.UnpackLog(event, "ReportVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_DestinationVerifier *DestinationVerifierFilterer) ParseReportVerified(log types.Log) (*DestinationVerifierReportVerified, error) {
	event := new(DestinationVerifierReportVerified)
	if err := _DestinationVerifier.contract.UnpackLog(event, "ReportVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_DestinationVerifier *DestinationVerifier) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _DestinationVerifier.abi.Events["AccessControllerSet"].ID:
		return _DestinationVerifier.ParseAccessControllerSet(log)
	case _DestinationVerifier.abi.Events["ConfigActivated"].ID:
		return _DestinationVerifier.ParseConfigActivated(log)
	case _DestinationVerifier.abi.Events["ConfigSet"].ID:
		return _DestinationVerifier.ParseConfigSet(log)
	case _DestinationVerifier.abi.Events["FeeManagerSet"].ID:
		return _DestinationVerifier.ParseFeeManagerSet(log)
	case _DestinationVerifier.abi.Events["OwnershipTransferRequested"].ID:
		return _DestinationVerifier.ParseOwnershipTransferRequested(log)
	case _DestinationVerifier.abi.Events["OwnershipTransferred"].ID:
		return _DestinationVerifier.ParseOwnershipTransferred(log)
	case _DestinationVerifier.abi.Events["ReportVerified"].ID:
		return _DestinationVerifier.ParseReportVerified(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (DestinationVerifierAccessControllerSet) Topic() common.Hash {
	return common.HexToHash("0x953e92b1a6442e9c3242531154a3f6f6eb00b4e9c719ba8118fa6235e4ce89b6")
}

func (DestinationVerifierConfigActivated) Topic() common.Hash {
	return common.HexToHash("0x90186a1e77b498ec417ea88bd026cae00d7043c357cc45221777623bda582dd4")
}

func (DestinationVerifierConfigSet) Topic() common.Hash {
	return common.HexToHash("0x2d763a674a99583454a287d792819ffb9ff7e791c23e7745a082701136ce336c")
}

func (DestinationVerifierFeeManagerSet) Topic() common.Hash {
	return common.HexToHash("0x04628abcaa6b1674651352125cb94b65b289145bc2bc4d67720bb7d966372f03")
}

func (DestinationVerifierOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (DestinationVerifierOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (DestinationVerifierReportVerified) Topic() common.Hash {
	return common.HexToHash("0x58ca9502e98a536e06e72d680fcc251e5d10b72291a281665a2c2dc0ac30fcc5")
}

func (_DestinationVerifier *DestinationVerifier) Address() common.Address {
	return _DestinationVerifier.address
}

type DestinationVerifierInterface interface {
	GetAccessController(opts *bind.CallOpts) (common.Address, error)

	GetFeeManager(opts *bind.CallOpts) (common.Address, error)

	IVerifierProxy(opts *bind.CallOpts) (common.Address, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetAccessController(opts *bind.TransactOpts, accessController common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, signers []common.Address, f uint8, recipientAddressesAndWeights []CommonAddressAndWeight) (*types.Transaction, error)

	SetConfigActive(opts *bind.TransactOpts, DONConfigID [24]byte, isActive bool) (*types.Transaction, error)

	SetFeeManager(opts *bind.TransactOpts, feeManager common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Verify(opts *bind.TransactOpts, signedReport []byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error)

	VerifyBulk(opts *bind.TransactOpts, signedReports [][]byte, parameterPayload []byte, sender common.Address) (*types.Transaction, error)

	FilterAccessControllerSet(opts *bind.FilterOpts) (*DestinationVerifierAccessControllerSetIterator, error)

	WatchAccessControllerSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierAccessControllerSet) (event.Subscription, error)

	ParseAccessControllerSet(log types.Log) (*DestinationVerifierAccessControllerSet, error)

	FilterConfigActivated(opts *bind.FilterOpts) (*DestinationVerifierConfigActivatedIterator, error)

	WatchConfigActivated(opts *bind.WatchOpts, sink chan<- *DestinationVerifierConfigActivated) (event.Subscription, error)

	ParseConfigActivated(log types.Log) (*DestinationVerifierConfigActivated, error)

	FilterConfigSet(opts *bind.FilterOpts, DONConfigID [][24]byte) (*DestinationVerifierConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierConfigSet, DONConfigID [][24]byte) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*DestinationVerifierConfigSet, error)

	FilterFeeManagerSet(opts *bind.FilterOpts) (*DestinationVerifierFeeManagerSetIterator, error)

	WatchFeeManagerSet(opts *bind.WatchOpts, sink chan<- *DestinationVerifierFeeManagerSet) (event.Subscription, error)

	ParseFeeManagerSet(log types.Log) (*DestinationVerifierFeeManagerSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DestinationVerifierOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *DestinationVerifierOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*DestinationVerifierOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DestinationVerifierOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *DestinationVerifierOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*DestinationVerifierOwnershipTransferred, error)

	FilterReportVerified(opts *bind.FilterOpts, feedId [][32]byte) (*DestinationVerifierReportVerifiedIterator, error)

	WatchReportVerified(opts *bind.WatchOpts, sink chan<- *DestinationVerifierReportVerified, feedId [][32]byte) (event.Subscription, error)

	ParseReportVerified(log types.Log) (*DestinationVerifierReportVerified, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
